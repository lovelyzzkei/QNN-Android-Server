/*
 * Copyright (c) 2016-2017, 2023 Qualcomm Technologies, Inc.
 * All Rights Reserved.
 * Confidential and Proprietary - Qualcomm Technologies, Inc.
 */
apply plugin: 'com.android.application'

allprojects {
    repositories {
        mavenCentral()
//        flatDir {
//            dirs 'libs'
//        }
        maven { url 'https://jitpack.io' }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }
}

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.2"
//    ndkVersion = "21.4.7075529"
    ndkVersion = "25.1.8937393"
    configurations {
        extractForNativeBuild
    }

//    compileOptions {
//        externalNativeBuild {
//            cmake {
//                arguments "-DANDROID_STL=c++_shared -fopenmp"
//            }
//        }
//    }

    defaultConfig {
        applicationId "com.lovelyzzkei.qnnSkeleton"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
                cppFlags '-fopenmp -fopenmp-simd'
            }
            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a'
            }
        }
    }
//    useLegacyPackaging true
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libSNPE.so'
        pickFirst 'lib/arm64-v8a/libQnnTFLiteDelegate.so'
        pickFirst 'lib/arm64-v8a/libQnnSystem.so'
    }

    externalNativeBuild {
//        ndkBuild {
//            path "src/main/jni/Android.mk"
//        }

        cmake {
//            path file('src/main/jni/CMakeLists.txt')
            path file('CMakeLists.txt')
            version '3.22.1'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
}

project.ext.LIB_DIR = projectDir.toString() + '/libs/'


dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    implementation files('libs/qtld-release')

    implementation 'com.android.support:support-annotations:+'

    implementation 'org.tensorflow:tensorflow-lite:2.16.1'
    implementation 'org.tensorflow:tensorflow-lite-gpu:2.16.1'
    implementation 'org.tensorflow:tensorflow-lite-gpu-api:2.16.1'
    implementation 'org.tensorflow:tensorflow-lite-support:0.4.4'

    // Theme
    implementation 'com.google.android.material:material:1.4.0'

    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    // Provides ARCore Session and related resources.
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.ar:core:1.29.0'
    implementation "com.google.ar.sceneform.ux:sceneform-ux:1.11.0"
//    implementation 'com.google.ar.sceneform:core:1.11.0'

    implementation project(':OpenCV')
    testImplementation 'junit:junit:4.12'
    implementation 'de.javagl:obj:0.4.0'

//    implementation 'com.facebook.fbjni:fbjni:0.0.2'


//    extractForNativeBuild('org.pytorch:pytorch_android:1.10.0')

}
task extractAARForNativeBuild {
    doLast {
        configurations.extractForNativeBuild.files.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "$buildDir/$file.name"
                include "headers/**"
                include "jni/**"
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('externalNativeBuild')) {
        task.dependsOn(extractAARForNativeBuild)
    }
}

apply plugin: 'com.google.ar.sceneform.plugin'


